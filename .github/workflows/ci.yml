name: CI

on: [push, pull_request]

jobs:
  cargo_fmt:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: cargo fmt --all -- --check

  cargo_test:
    strategy:
      matrix:
        runs-on:
          - ubuntu-18.04
          - macOS-10.15
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v2
    - run: cargo test -- --color=always --nocapture

  linux_operational_test:
    needs:
      - cross_build
    runs-on: ubuntu-18.04
    steps:
    - name: Download the artifact (cross build)
      uses: actions/download-artifact@v2
      with:
        name: cross_build_artifact
    - uses: actions/checkout@v2
    - name: Extract binary
      run: tar xf piping-server-x86_64-unknown-linux-musl.tar.gz
    - name: Operational test
      run: |
        set -xeu
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        ./piping-server-x86_64-unknown-linux-musl/piping-server --http-port=8181 --enable-https --https-port=8443 --crt-path=./ssl_certs/server.crt --key-path=./ssl_certs/server.key &
        sleep 3

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        cat /tmp/500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath)
        rm /tmp/500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTPS
        cat /tmp/500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat /tmp/500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm /tmp/500M.dat

        # HTTP/2 support
        (echo hello | curl -ksST- https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n' > /tmp/http2_post.txt) &
        diff <(echo '2:200') <(curl -ksS https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n')
        diff <(echo '2:200') /tmp/http2_post.txt

        # Transfer data using multipart
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        curl -F myfile=@/tmp/500M.dat localhost:8181/mypath3 &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath3)
        rm /tmp/500M.dat

  docker:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: docker build -t piping-server-rust .
    - name: Operational test with Docker image
      run: |
        set -eux
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        docker run -d --name=piping -p 8181:80 -p 8443:443 -v $PWD/ssl_certs:/ssl_certs piping-server-rust --http-port=80 --enable-https --https-port=443 --crt-path=/ssl_certs/server.crt --key-path=/ssl_certs/server.key
        # Wait for server running
        sleep 1

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        cat /tmp/500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath)
        rm /tmp/500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTPS
        cat /tmp/500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat /tmp/500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm /tmp/500M.dat

        # HTTP/2 support
        (echo hello | curl -ksST- https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n' > /tmp/http2_post.txt) &
        diff <(echo '2:200') <(curl -ksS https://localhost:8443/mypath3 -o /dev/null -w '%{http_version}:%{http_code}\n')
        diff <(echo '2:200') /tmp/http2_post.txt

        # Transfer data using multipart
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=/tmp/500M.dat
        # Transfer large data over HTTP
        curl -F myfile=@/tmp/500M.dat localhost:8181/mypath3 &
        diff <(cat /tmp/500M.dat) <(curl localhost:8181/mypath3)
        rm /tmp/500M.dat

        # Print server log
        docker logs piping
        # Delete container
        docker rm -f piping

  release_if_tag_exits:
    needs:
      - cargo_fmt
      - cargo_test
      - linux_operational_test
      - build_for_mac
    runs-on: ubuntu-18.04
    steps:
    - name: Extract tag name
      shell: bash
      run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
      id: extract_tag
    # NOTE: checkout is needed to use hub command
    - uses: actions/checkout@v2
    - name: Download the artifact (cross build)
      uses: actions/download-artifact@v2
      with:
        name: cross_build_artifact
    - name: Download the artifact (macOS)
      uses: actions/download-artifact@v2
      with:
        name: mac_build_artifact
    - run: ls -la
    # (base: https://github.com/actions/upload-release-asset/issues/28#issuecomment-617208601)
    - name: Release
      if: contains(github.ref, 'refs/tags/')
      run: |
        set -eux
        hub release create \
          -a piping-server-x86-64-linux.tar.gz \
          -a piping-server-x86-64-linux.zip \
          -a piping-server-x86-64-apple-darwin.tar.gz \
          -a piping-server-x86-64-apple-darwin.zip \
          -m "Release ${{ steps.extract_tag.outputs.tag }}" ${{ steps.extract_tag.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  heroku_docker_build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - run: docker build -t piping-server-rust -f ./heroku.dockerfile .

  cross_build:
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-musl
          - arm-linux-androideabi
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - armv5te-unknown-linux-musleabi
          - armv7-linux-androideabi
          - armv7-unknown-linux-musleabihf
          - i586-unknown-linux-musl
          - i686-linux-android
          - i686-unknown-linux-musl
          - x86_64-linux-android
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-musl
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install cross
        run: curl -L https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xzf -
      - run: ./cross build --target=${{ matrix.target }} --release --locked
      - name: Archive binary
        run: |
          set -eu
          mkdir ./piping-server-${{ matrix.target }}
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            cp ./target/${{ matrix.target }}/release/piping-server.exe ./piping-server-${{ matrix.target }}
            zip -r ./piping-server-${{ matrix.target }}.zip ./piping-server-${{ matrix.target }}
          else
            cp ./target/${{ matrix.target }}/release/piping-server ./piping-server-${{ matrix.target }}
            tar zcf ./piping-server-${{ matrix.target }}.tar.gz ./piping-server-${{ matrix.target }}
          fi
      - uses: actions/upload-artifact@v2
        with:
          name: cross_build_artifact
          path: |
            piping-server-*.tar.gz
            piping-server-*.zip

  build_for_mac:
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    runs-on: macOS-11
    steps:
      - uses: actions/checkout@v2
      - run: rustup target add ${{ matrix.target }}
      - run: cargo build --target=${{ matrix.target }} --release --locked
      - name: Archive binary
        run: |
          set -eu
          mkdir ./piping-server-${{ matrix.target }}
          cp ./target/${{ matrix.target }}/release/piping-server ./piping-server-${{ matrix.target }}
          tar zcf ./piping-server-${{ matrix.target }}.tar.gz ./piping-server-${{ matrix.target }}
      - uses: actions/upload-artifact@v2
        with:
          name: mac_build_artifact
          path: |
            piping-server-*.tar.gz
