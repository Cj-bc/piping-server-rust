name: CI

on: [push, pull_request]

jobs:
  build_and_operational_test:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Version information
      run: |
        rustc --version
        cargo --version
        rustup --version
    - name: Build all targets
      run: cargo build --all --all-targets
    - name: Operational test
      run: |
        set -x
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        cargo run -- --http-port=8181 --enable-https --https-port=8443 --crt-path=./ssl_certs/server.crt --key-path=./ssl_certs/server.key &
        sleep 3

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=500M.dat
        # Transfer large data over HTTP
        cat 500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat 500M.dat) <(curl localhost:8181/mypath)
        rm 500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=500M.dat
        # Transfer large data over HTTPS
        cat 500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat 500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm 500M.dat
  
  docker:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - run: docker build -t piping-server-rust .
    - name: Operational test with Docker image
      run: |
        set -eux
        # Create certificates
        mkdir ssl_certs && cd ssl_certs && openssl req -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 365 -sha256 -nodes --subj '/CN=localhost/' && cd -
        # Run a server
        docker run -d --name=piping -p 8181:80 -p 8443:443 -v $PWD/ssl_certs:/ssl_certs piping-server-rust --http-port=80 --enable-https --https-port=443 --crt-path=/ssl_certs/server.crt --key-path=/ssl_certs/server.key
        # Wait for server running
        sleep 1

        # Transfer data over HTTP
        echo "hello, world" | curl -T - localhost:8181/mypath &
        diff <(echo "hello, world") <(curl localhost:8181/mypath)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=500M.dat
        # Transfer large data over HTTP
        cat 500M.dat | curl -T - localhost:8181/mypath &
        diff <(cat 500M.dat) <(curl localhost:8181/mypath)
        rm 500M.dat

        # Transfer data over HTTPS
        echo "hello, world with HTTPS" | curl -kT - https://localhost:8443/mypath2 &
        diff <(echo "hello, world with HTTPS") <(curl -k https://localhost:8443/mypath2)
        # Make a large random file
        dd if=/dev/urandom iflag=count_bytes count=500M bs=1M of=500M.dat
        # Transfer large data over HTTPS
        cat 500M.dat | curl -kT - https://localhost:8443/mypath2 &
        diff <(cat 500M.dat) <(curl -k https://localhost:8443/mypath2)
        rm 500M.dat
        
        # Print server log
        docker logs piping
        # Delete container
        docker rm -f piping

  build_and_release_if_tag_exits:
    runs-on: ubuntu-18.04
    steps:
    - name: Extract tag name
      shell: bash
      run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
      id: extract_tag
    - run: echo "tag name ${{ steps.extract_tag.outputs.tag }}"
    - uses: actions/checkout@v2
    - name: Build
      run: docker run --rm -v "$(pwd)":/home/rust/src ekidd/rust-musl-builder:1.46.0 sh -c 'sudo chown -R rust:rust . && cargo build --release'
    - name: Archive
      run: |
        set -eux
        sudo chown -R $USER:$USER .
        mkdir piping-server-x86-64-linux
        cp target/x86_64-unknown-linux-musl/release/piping-server piping-server-x86-64-linux
        zip -r piping-server-x86-64-linux.zip piping-server-x86-64-linux
        tar czf piping-server-x86-64-linux.tar.gz piping-server-x86-64-linux
    - name: Create Release
      if: contains(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_tag.outputs.tag }}
        release_name: Release ${{ steps.extract_tag.outputs.tag }}
        draft: false
        prerelease: false
    - uses: actions/upload-release-asset@v1
      if: contains(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./piping-server-x86-64-linux.zip
        asset_name: piping-server-x86-64-linux.zip
        asset_content_type: application/zip
    - uses: actions/upload-release-asset@v1
      if: contains(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./piping-server-x86-64-linux.tar.gz
        asset_name: piping-server-x86-64-linux.tar.gz
        asset_content_type: application/tar+gzip
